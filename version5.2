// Constants for the number of joints in the robot arm
const int NUM_JOINTS = 5;

// Constants for the pins connected to the servo motors
const int JOINT_1_PIN = 2;
const int JOINT_2_PIN = 3;
const int JOINT_3_PIN = 4;
const int JOINT_4_PIN = 5;
const int JOINT_5_PIN = 6;

// Function to initialize the servo motors
void initializeServos() {
  // Set the pins as outputs
  for (int i = 1; i <= NUM_JOINTS; i++) {
    pinMode(JOINT_1_PIN + i, OUTPUT);
  }

  // Initialize the servo motors to their default positions
  for (int i = 1; i <= NUM_JOINTS; i++) {
    setServoPosition(i, 90);
  }
}

// Function to set the position of a servo motor
void setServoPosition(int joint, int position) {
  // Ensure the position is within the valid range (0-180)
  if (position < 0) {
    position = 0;
  } else if (position > 180) {
    position = 180;
  }

  // Set the servo motor to the desired position
  int pulseWidth = map(position, 0, 180, 500, 2500);
  digitalWrite(JOINT_1_PIN + joint, HIGH);
  delayMicroseconds(pulseWidth);
  digitalWrite(JOINT_1_PIN + joint, LOW);
}

// Function to move the robot arm to a specific position
void moveToPosition(int positions[NUM_JOINTS]) {
  for (int i = 1; i <= NUM_JOINTS; i++) {
    setServoPosition(i, positions[i-1]);
  }
}

// Function to move the robot arm to a position relative to its current position
void moveRelative(int deltas[NUM_JOINTS]) {
  int currentPositions[NUM_JOINTS];
  for (int i = 1; i <= NUM_JOINTS; i++) {
    currentPositions[i-1] = getServoPosition(i);
  }

  for (int i = 1; i <= NUM_JOINTS; i++) {
    int newPosition = currentPositions[i-1] + deltas[i-1];
    setServoPosition(i, newPosition);
  }
}

// Function to get the position of a servo motor
int getServoPosition(int joint) {
  int pulseWidth = pulseIn(JOINT_1_PIN + joint, HIGH);
  int position = map(pulseWidth, 500, 2500, 0, 180);
  return position;
}

// Function to move the robot arm to a predefined position (e.g. "home" or "grasp")
void moveToPredefinedPosition(String position) {
  if (position == "home") {
    moveToPosition(new int[]{90, 90, 90, 90, 90});
  } else if (position == "grasp") {
    moveToPosition(new int[]{45, 60, 45, 90, 0});
  }
  // Add more predefined positions as needed
}

// Function to control the robot arm using serial input
void controlRobotArm() {
  while (true) {
    if (Serial.available() > 0) {
      String command = Serial.readString();
      if (command.startsWith("moveTo")) {
        String positionString = command.substring(8);
        int positions[NUM_JOINTS];
        for (int i = 0; i < NUM_JOINTS; i++) {
          positions[i] = positionString.substring(2*i, 2*i+2).toInt();
        }
        moveToPosition(positions);
      } else if (command.startsWith("moveRelative")) {
        String deltaString = command.substring(13);
        int deltas[NUM_JOINTS];
        for (int i = 0; i < NUM_JOINTS; i++) {
          deltas[i] = deltaString.substring(2*i, 2*i+2).toInt();
        }
        moveRelative(deltas);
      } else if (command.startsWith("moveToPredefined")) {
        String positionString = command.substring(17);
        moveToPredefinedPosition(positionString);
      }
    }
  }
}

void setup() {
  Serial.begin(9600);
  initializeServos();
}

void loop() {
  controlRobotArm();
}
